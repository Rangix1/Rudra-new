// рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдЖрдкрдиреЗ node-gtts рд▓рд╛рдЗрдмреНрд░реЗрд░реА рдЗрдВрд╕реНрдЯреЙрд▓ рдХреА рд╣реИ: npm install node-gtts
const gtts = require('node-gtts')('en'); // Mirai рдХреЗ рд▓рд┐рдП рдбрд┐рдлрд╝реЙрд▓реНрдЯ рднрд╛рд╖рд╛ 'en' рд░рдЦрдирд╛ рдмреЗрд╣рддрд░ рд╣реЛ рд╕рдХрддрд╛ рд╣реИ, рдпрд╛ рдЗрд╕реЗ config рд╕реЗ рд▓реЗрдВ

const fs = require('fs-extra'); // Mirai рдХреЗ рд▓рд┐рдП standard, рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдпрд╣ рдЗрдВрд╕реНрдЯреЙрд▓ рд╣реИ
const path = require('path'); // Node.js standard, Mirai рдореЗрдВ рдЙрдкрд▓рдмреНрдз рд╣реИ

module.exports.config = {
    name: "say", // рдХрдорд╛рдВрдб рдХрд╛ рдирд╛рдо
    version: "1.0.3", // рд╡рд░реНрдЬрди рдЕрдкрдбреЗрдЯ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ (рдпрджрд┐ рдХреЛрдИ рд╕реБрдзрд╛рд░ рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реЛ)
    hasPermssion: 0, // рдХреМрди рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддрд╛ рд╣реИ (0 = рдХреЛрдИ рднреА, 1 = рдПрдбрдорд┐рди, 2 = рдмреЙрдЯ рдПрдбрдорд┐рди)
    credits: "Rudra and Adapted for Mirai", // рдЕрдкрдирд╛ рдирд╛рдо рд▓рд┐рдЦреЗрдВ рдФрд░ Mirai рдХреЗ рд▓рд┐рдП рдЕрдиреБрдХреВрд▓рди рдХрд╛ рдЙрд▓реНрд▓реЗрдЦ рдХрд░реЗрдВ
    description: "Converts text to speech and sends as a voice message using gTTS", // рдХрдорд╛рдВрдб рдХрд╛ рд╡рд┐рд╡рд░рдг
    commandCategory: "Media", // рдХрдорд╛рдВрдб рдХреА рдХреИрдЯреЗрдЧрд░реА
    usages: "[lang] [text] or reply to a message with [lang]", // рдЙрдкрдпреЛрдЧ рдХрд╛ рддрд░реАрдХрд╛ рд╕реНрдкрд╖реНрдЯ рдХрд░реЗрдВ
    cooldowns: 5, // рдХрдорд╛рдВрдб рдХреЛ рджреЛрдмрд╛рд░рд╛ рдЪрд▓рд╛рдиреЗ рд╕реЗ рдкрд╣рд▓реЗ рдХрд┐рддрдирд╛ рдЗрдВрддрдЬрд╝рд╛рд░ рдХрд░рдирд╛ рд╣реИ (рд╕реЗрдХрдВрдб рдореЗрдВ)
    dependencies: { // рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдпреЗ рдкреИрдХреЗрдЬ рдЗрдВрд╕реНрдЯреЙрд▓ рд╣реИрдВ
        "path": "",
        "fs-extra": "",
        "node-gtts": ""
    }
};

module.exports.run = async function({ api, event, args }) {
    try {
        // рдЪреЗрдХ рдХрд░реЗрдВ рдХрд┐ рдпреВрдЬрд░ рдиреЗ рдХреЛрдИ рдЯреЗрдХреНрд╕реНрдЯ рджрд┐рдпрд╛ рд╣реИ рдпрд╛ рдирд╣реАрдВ
        if (args.length === 0 && event.type !== "message_reply") {
            // Mirai рдореЗрдВ api.sendMessage рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
            return api.sendMessage("ЁЯдФ рдХреГрдкрдпрд╛ рдЯреЗрдХреНрд╕реНрдЯ рджреЗрдВ рдЬрд┐рд╕реЗ рдЖрдк рд╡реЙрдпрд╕ рдореЗрдВ рдмрджрд▓рд╡рд╛рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВред\nрдЙрджрд╛рд╣рд░рдг: рдЖрдкрдХреЗ рдХрдорд╛рдВрдб рдХрд╛Prefix say hi рдирдорд╕реНрддреЗ рдмреЙрдЯ\nрдпрд╛ рдХрд┐рд╕реА рдореИрд╕реЗрдЬ рдХрд╛ рд░рд┐рдкреНрд▓рд╛рдИ рдХрд░рдХреЗ рд▓рд┐рдЦреЗрдВ: рдЖрдкрдХреЗ рдХрдорд╛рдВрдб рдХрд╛Prefix say en", event.threadID, event.messageID);
        }

        let languageToSay = global.config.language || 'en'; // рдмреЙрдЯ config рд╕реЗ рдбрд┐рдлрд╝реЙрд▓реНрдЯ рднрд╛рд╖рд╛ рд▓реЗрдВ, рдпрд╛ 'en'
        let textToSay = "";

        // gtts рджреНрд╡рд╛рд░рд╛ рд╕рдкреЛрд░реНрдЯреЗрдб рднрд╛рд╖рд╛рдПрдВ (Mirai рдХреЗ рд▓рд┐рдП рд╕рд╛рдорд╛рдиреНрдп)
        const supportedLanguages = ['af', 'sq', 'ar', 'bn', 'bs', 'bg', 'ca', 'zh-CN', 'zh-TW', 'hr', 'cs', 'da', 'nl', 'en', 'et', 'fil', 'fi', 'fr', 'de', 'el', 'gu', 'hif', 'hi', 'hu', 'id', 'is', 'it', 'ja', 'jw', 'kn', 'km', 'ko', 'la', 'lv', 'lt', 'ml', 'mr', 'my', 'ne', 'no', 'pl', 'pt', 'ro', 'ru', 'sr', 'si', 'sk', 'su', 'sw', 'ta', 'te', 'th', 'tl', 'tr', 'uk', 'ur', 'uz', 'vi', 'zh-CN', 'zh-TW'];

        // рдЗрдирдкреБрдЯ рдкрд╛рд░реНрд╕ рдХрд░реЗрдВ
        const firstArg = args[0]?.toLowerCase();

        if (event.type === "message_reply") {
            // рдпрджрд┐ рд░рд┐рдкреНрд▓рд╛рдИ рд╣реИ, рддреЛ рд░рд┐рдкреНрд▓рд╛рдИ рдореИрд╕реЗрдЬ рдХрд╛ рдЯреЗрдХреНрд╕реНрдЯ рд▓реЗрдВ
            textToSay = event.messageReply.body;

            // рдпрджрд┐ рд░рд┐рдкреНрд▓рд╛рдИ рдХреЗ рд╕рд╛рде рдХрдорд╛рдВрдб рдореЗрдВ рдкрд╣рд▓рд╛ рдЖрд░реНрдЧреБрдореЗрдВрдЯ рднрд╛рд╖рд╛ рдХреЛрдб рд╣реИ, рддреЛ рдЙрд╕реЗ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
            if (args.length > 0 && supportedLanguages.includes(firstArg)) {
                languageToSay = firstArg;
                // рдЗрд╕ рдорд╛рдорд▓реЗ рдореЗрдВ textToSay рдкрд╣рд▓реЗ рд╣реА event.messageReply.body рдкрд░ рд╕реЗрдЯ рд╣реИ
                // args рдореЗрдВ рдХреЗрд╡рд▓ рд╡рд╣ рдЯреЗрдХреНрд╕реНрдЯ рд╣реЛрддрд╛ рд╣реИ рдЬреЛ рд░рд┐рдкреНрд▓рд╛рдИ рдХреЗ рд╕рд╛рде рдЯрд╛рдЗрдк рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ, рдЗрд╕рд▓рд┐рдП args.slice(1).join(" ") рдХрд╛ рдЙрдкрдпреЛрдЧ рдирд╣реАрдВ рдХрд░реЗрдВрдЧреЗ
            } else {
                // рд░рд┐рдкреНрд▓рд╛рдИ рд╣реЛрдиреЗ рдкрд░ args рд╕реЗ рднрд╛рд╖рд╛ рдХреЛрдб рдирд╣реАрдВ рдорд┐рд▓рд╛, рдбрд┐рдлрд╝реЙрд▓реНрдЯ рднрд╛рд╖рд╛ рдЙрдкрдпреЛрдЧ рд╣реЛрдЧреА
            }

            // рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рд░рд┐рдкреНрд▓рд╛рдИ рдореИрд╕реЗрдЬ рдореЗрдВ рдЯреЗрдХреНрд╕реНрдЯ рдерд╛
            if (!textToSay || textToSay.trim().length === 0) {
                 return api.sendMessage("ЁЯд╖тАНтЩАя╕П рд░рд┐рдкреНрд▓рд╛рдИ рдореИрд╕реЗрдЬ рдореЗрдВ рдХреЛрдИ рдЯреЗрдХреНрд╕реНрдЯ рдирд╣реАрдВ рд╣реИ рдЬрд┐рд╕реЗ рд╡реЙрдпрд╕ рдореЗрдВ рдмрджрд▓ рд╕рдХреВрдВред", event.threadID, event.messageID);
            }

        } else {
            // рдпрджрд┐ рд░рд┐рдкреНрд▓рд╛рдИ рдирд╣реАрдВ рд╣реИ
            if (args.length > 1 && supportedLanguages.includes(firstArg)) {
                // рдпрджрд┐ рдкрд╣рд▓рд╛ рдЖрд░реНрдЧреБрдореЗрдВрдЯ рднрд╛рд╖рд╛ рдХреЛрдб рд╣реИ рдФрд░ рдЙрд╕рдХреЗ рдмрд╛рдж рдЯреЗрдХреНрд╕реНрдЯ рд╣реИ
                languageToSay = firstArg;
                textToSay = args.slice(1).join(" "); // рднрд╛рд╖рд╛ рдХреЛрдб рдХреЗ рдмрд╛рдж рдХрд╛ рдЯреЗрдХреНрд╕реНрдЯ рд▓реЗрдВ
            } else {
                // рдпрджрд┐ рдкрд╣рд▓рд╛ рдЖрд░реНрдЧреБрдореЗрдВрдЯ рднрд╛рд╖рд╛ рдХреЛрдб рдирд╣реАрдВ рд╣реИ, рдпрд╛ рд╕рд┐рд░реНрдл рдПрдХ рдЖрд░реНрдЧреБрдореЗрдВрдЯ рд╣реИ, рддреЛ рдкреВрд░рд╛ рдЯреЗрдХреНрд╕реНрдЯ рд▓реЗрдВ
                textToSay = args.join(" "); // рдкреВрд░рд╛ рдЯреЗрдХреНрд╕реНрдЯ TTS рдХреЗ рд▓рд┐рдП рд╣реИ
                // рднрд╛рд╖рд╛ рдбрд┐рдлрд╝реЙрд▓реНрдЯ рд░рд╣реЗрдЧреА
            }

            // рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдбрд╛рдпрд░реЗрдХреНрдЯ рдЗрдирдкреБрдЯ рдореЗрдВ рдЯреЗрдХреНрд╕реНрдЯ рдерд╛
            if (!textToSay || textToSay.trim().length === 0) {
                return api.sendMessage("ЁЯТм рдХреГрдкрдпрд╛ рдЯреЗрдХреНрд╕реНрдЯ рджреЗрдВ рдЬрд┐рд╕реЗ рдЖрдк рд╡реЙрдпрд╕ рдореЗрдВ рдмрджрд▓рд╡рд╛рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВред", event.threadID, event.messageID);
            }
        }

        // рдСрдбрд┐рдпреЛ рдлрд╛рдЗрд▓ рдХреЗ рд▓рд┐рдП рдПрдХ рдЯреЗрдореНрдкрд░реЗрд░реА рдкрд╛рде Mirai рдХреЗ cache рдлреЛрд▓реНрдбрд░ рдореЗрдВ
        // Mirai рдореЗрдВ global.cachePath рдЙрдкрд▓рдмреНрдз рд╣реЛ рд╕рдХрддрд╛ рд╣реИ, рдпрд╛ __dirname/cache рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
        const cacheFolder = path.join(__dirname, 'cache'); // рдХрдорд╛рдВрдб рдлрд╛рдЗрд▓ рдХреЗ рдкрд╛рд╕ cache рдлреЛрд▓реНрдбрд░
        // alternative: const cacheFolder = global.cachePath || path.join(__dirname, 'cache');
        const audioFilePath = path.join(cacheFolder, `${event.threadID}_${event.senderID}_${Date.now()}.mp3`);

        // cache рдбрд╛рдпрд░реЗрдХреНрдЯрд░реА рдореМрдЬреВрдж рд╣реИ рдпрд╛ рдирд╣реАрдВ, рдЪреЗрдХ рдХрд░реЗрдВ рдФрд░ рдмрдирд╛рдПрдВ (fs-extra)
        await fs.ensureDir(cacheFolder);

        // Mirai api.sendTypingMgs рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рдЯрд╛рдЗрдкрд┐рдВрдЧ рдЗрдВрдбрд┐рдХреЗрдЯрд░ рджрд┐рдЦрд╛рдПрдВ (рд╡реИрдХрд▓реНрдкрд┐рдХ)
        // api.sendTypingMgs(event.threadID);


        try {
            // 1. рдЯреЗрдХреНрд╕реНрдЯ рд╕реЗ рдСрдбрд┐рдпреЛ рдлрд╛рдЗрд▓ рдЬрдирд░реЗрдЯ рдХрд░реЗрдВ using node-gtts
            await new Promise((resolve, reject) => {
                const gttsStream = gtts.stream(textToSay, languageToSay); // рднрд╛рд╖рд╛ рдкрд╛рд╕ рдХрд░реЗрдВ
                const writeStream = fs.createWriteStream(audioFilePath);

                gttsStream.pipe(writeStream);

                writeStream.on('finish', () => resolve());
                writeStream.on('error', (err) => {
                    console.error("ЁЯФ┤ Mirai Say Command: Write stream error:", err);
                    reject(err);
                });
                gttsStream.on('error', (err) => {
                     console.error("ЁЯФ┤ Mirai Say Command: gTTS stream error:", err);
                     reject(err); // gTTS рд╕реЗ рд╕реНрдЯреНрд░реАрдорд┐рдВрдЧ рдХреЗ рджреМрд░рд╛рди рдПрд░рд░ рд╣реИрдВрдбрд▓ рдХрд░реЗрдВ
                });
            });

            // 2. рдСрдбрд┐рдпреЛ рдлрд╛рдЗрд▓ рдХреЛ рдЕрдЯреИрдЪрдореЗрдВрдЯ рдХреЗ рд░реВрдк рдореЗрдВ рднреЗрдЬреЗрдВ (Mirai Standard)
            const message = {
                attachment: fs.createReadStream(audioFilePath)
            };

            api.sendMessage(
                message,
                event.threadID,
                (err) => { // рдореИрд╕реЗрдЬ рднреЗрдЬрдиреЗ рдХреЗ рдмрд╛рдж рдХрд╛ рдХреЙрд▓рдмреИрдХ
                    if (err) {
                        console.error("ЁЯФ┤ Mirai Say Command: рд╡реЙрдпрд╕ рдореИрд╕реЗрдЬ рднреЗрдЬрдиреЗ рдореЗрдВ рдПрд░рд░:", err);
                        // рд╡реИрдХрд▓реНрдкрд┐рдХ: рдЕрдЧрд░ рд╡реЙрдп╤Б рднреЗрдЬрдиреЗ рдореЗрдВ рдлреЗрд▓ рд╣реБрдЖ, рддреЛ рдЯреЗрдХреНрд╕реНрдЯ рдореИрд╕реЗрдЬ рднреЗрдЬреЗрдВ
                        api.sendMessage(`тЭМ рд╕реЙрд░реА, рд╡реЙрдпрд╕ рдореИрд╕реЗрдЬ рднреЗрдЬ рдирд╣реАрдВ рдкрд╛рдпрд╛ред`, event.threadID, event.messageID);
                    } else {
                        console.log(`тЬЕ Mirai Say Command: рд╡реЙрдпрд╕ рдореИрд╕реЗрдЬ рднреЗрдЬрд╛ рдЧрдпрд╛ thread ${event.threadID} рдкрд░`);
                    }

                    // 3. рдЯреЗрдореНрдкрд░реЗрд░реА рдСрдбрд┐рдпреЛ рдлрд╛рдЗрд▓ рдХреЛ рдбрд┐рд▓реАрдЯ рдХрд░реЗрдВ (Mirai рдХреЗ рд▓рд┐рдП рдорд╣рддреНрд╡рдкреВрд░реНрдг, cache рд╕рд╛рдл рд░рдЦрдирд╛ рд╣реИ)
                    fs.unlink(audioFilePath, (unlinkErr) => {
                        if (unlinkErr) console.error("ЁЯФ┤ Mirai Say Command: рдЯреЗрдореНрдк рдСрдбрд┐рдпреЛ рдлрд╛рдЗрд▓ рдбрд┐рд▓реАрдЯ рдХрд░рдиреЗ рдореЗрдВ рдПрд░рд░:", unlinkErr);
                    });
                },
                event.messageID // рдореВрд▓ рдореИрд╕реЗрдЬ рдХрд╛ рдЬрд╡рд╛рдм рджреЗрдВ
            );

        } catch (error) {
            console.error("ЁЯФ┤ Mirai Say Command: рд╡реЙрдпрд╕ рдЬрдирд░реЗрдЯ рдХрд░рдиреЗ рдпрд╛ рднреЗрдЬрдиреЗ рдореЗрдВ рдПрд░рд░:", error);
            // рдЕрдЧрд░ рд╡реЙрдп╤Б рдЬрдирд░реЗрдЯ рдХрд░рдиреЗ рдпрд╛ рднреЗрдЬрдиреЗ рдореЗрдВ рдлреЗрд▓ рд╣реБрдЖ, рддреЛ рдЯреЗрдХреНрд╕реНрдЯ рдореИрд╕реЗрдЬ рднреЗрдЬреЗрдВ
            api.sendMessage(`тЭМ рд╕реЙрд░реА, рдЖрдкрдХрд╛ рдЯреЗрдХреНрд╕реНрдЯ рд╡реЙрдпрд╕ рдореЗрдВ рдЬрдирд░реЗрдЯ рдпрд╛ рднреЗрдЬ рдирд╣реАрдВ рдкрд╛рдпрд╛ред рдПрд░рд░: ${error.message}`, event.threadID, event.messageID);
             // рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдПрд░рд░ рд╣реЛрдиреЗ рдкрд░ рднреА рдЕрд╕реНрдерд╛рдпреА рдлрд╝рд╛рдЗрд▓ рдбрд┐рд▓реАрдЯ рдХрд░рдиреЗ рдХреА рдХреЛрд╢рд┐рд╢ рд╣реЛ (рдпрджрд┐ рд╡рд╣ рдмрдиреА рд╣реЛ)
             if (await fs.exists(audioFilePath)) {
                 fs.unlink(audioFilePath, (unlinkErr) => {
                    if (unlinkErr) console.error("ЁЯФ┤ Mirai Say Command: рдПрд░рд░ рдХреЗ рдмрд╛рдж рдЯреЗрдореНрдк рдлрд╛рдЗрд▓ рдбрд┐рд▓реАрдЯ рдХрд░рдиреЗ рдореЗрдВ рдПрд░рд░:", unlinkErr);
                 });
             }
        }
    } catch (e) {
        console.error("ЁЯФ┤ Mirai Say Command: рдХрдорд╛рдВрдб рдЪрд▓рд╛рдиреЗ рдореЗрдВ рдЕрдирдПрдХреНрд╕рдкреЗрдХреНрдЯреЗрдб рдПрд░рд░:", e);
        // Mirai api.sendMessage рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
        return api.sendMessage(`тЭМ рдХрдорд╛рдВрдб рдЪрд▓рд╛рддреЗ рд╕рдордп рдПрдХ рдПрд░рд░ рдЖ рдЧрдИ: ${e.message}`, event.threadID, event.messageID);
    }
};
